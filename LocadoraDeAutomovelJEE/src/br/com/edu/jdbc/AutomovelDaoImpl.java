/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package br.com.edu.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.sql.CallableStatement;

import br.com.edu.dao.*;
import br.com.edu.dto.*;
import br.com.edu.exceptions.*;
import br.com.edu.factory.*;

public class AutomovelDaoImpl extends AbstractDAO implements AutomovelDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT codigo, marca, modelo, cor, ano, motor, cod_tipo FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "{ call sp_Automovel ( ?, ?, ?, ?, ?, ?, ? ) }";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET codigo = ?, marca = ?, modelo = ?, cor = ?, ano = ?, motor = ?, cod_tipo = ? WHERE codigo = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE codigo = ?";

	/** 
	 * Index of column codigo
	 */
	protected static final int COLUMN_CODIGO = 1;

	/** 
	 * Index of column marca
	 */
	protected static final int COLUMN_MARCA = 2;

	/** 
	 * Index of column modelo
	 */
	protected static final int COLUMN_MODELO = 3;

	/** 
	 * Index of column cor
	 */
	protected static final int COLUMN_COR = 4;

	/** 
	 * Index of column ano
	 */
	protected static final int COLUMN_ANO = 5;

	/** 
	 * Index of column motor
	 */
	protected static final int COLUMN_MOTOR = 6;

	/** 
	 * Index of column cod_tipo
	 */
	protected static final int COLUMN_COD_TIPO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;
	/** 
	 * Inserts a new row in the automovel table.
	 */
	public boolean insert(Automovel dto) throws AutomovelDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		CallableStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareCall( SQL_INSERT );
			stmt.setInt( COLUMN_CODIGO, dto.getCodigo() );
			stmt.setString( COLUMN_MARCA, dto.getMarca() );
			stmt.setString( COLUMN_MODELO, dto.getModelo() );
			stmt.setString( COLUMN_COR, dto.getCor() );
			if (dto.isAnoNull()) {
				stmt.setNull( COLUMN_ANO, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( COLUMN_ANO, dto.getAno() );
			}
		
			if (dto.isMotorNull()) {
				stmt.setNull( COLUMN_MOTOR, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( COLUMN_MOTOR, dto.getMotor() );
			}
		
			stmt.setInt( COLUMN_COD_TIPO, dto.getCodTipo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			stmt.execute();
			int rows = stmt.getUpdateCount();
			System.out.println( rows + " rows affected" );
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AutomovelDaoException( "Exception: " + _e.getMessage(), _e );			
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the automovel table.
	 */
	public boolean update(AutomovelPk pk, Automovel dto) throws AutomovelDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getCodigo() );
			stmt.setString( index++, dto.getMarca() );
			stmt.setString( index++, dto.getModelo() );
			stmt.setString( index++, dto.getCor() );
			if (dto.isAnoNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getAno() );
			}
		
			if (dto.isMotorNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getMotor() );
			}
		
			stmt.setInt( index++, dto.getCodTipo() );
			stmt.setInt( 8, dto.getCodigo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AutomovelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the automovel table.
	 */
	public boolean delete(AutomovelPk pk) throws AutomovelDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getCodigo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AutomovelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the automovel table that matches the specified primary-key value.
	 */
	public Automovel findByPrimaryKey(AutomovelPk pk) throws AutomovelDaoException
	{
		return findByPrimaryKey( pk.getCodigo() );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'codigo = :codigo'.
	 */
	public Automovel findByPrimaryKey(int codigo) throws AutomovelDaoException
	{
		Automovel ret[] = findByDynamicSelect( SQL_SELECT + " WHERE codigo = ?", new Object[] {  new Integer(codigo) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria ''.
	 */
	public Automovel[] findAll() throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY codigo", null );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'cod_tipo = :codTipo'.
	 */
	public Automovel[] findByTipo(int codTipo) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cod_tipo = ?", new Object[] {  new Integer(codTipo) } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'codigo = :codigo'.
	 */
	public Automovel[] findWhereCodigoEquals(int codigo) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE codigo = ? ORDER BY codigo", new Object[] {  new Integer(codigo) } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'marca = :marca'.
	 */
	public Automovel[] findWhereMarcaEquals(String marca) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE marca = ? ORDER BY marca", new Object[] { marca } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'modelo = :modelo'.
	 */
	public Automovel[] findWhereModeloEquals(String modelo) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE modelo = ? ORDER BY modelo", new Object[] { modelo } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'cor = :cor'.
	 */
	public Automovel[] findWhereCorEquals(String cor) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cor = ? ORDER BY cor", new Object[] { cor } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'ano = :ano'.
	 */
	public Automovel[] findWhereAnoEquals(int ano) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ano = ? ORDER BY ano", new Object[] {  new Integer(ano) } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'motor = :motor'.
	 */
	public Automovel[] findWhereMotorEquals(float motor) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE motor = ? ORDER BY motor", new Object[] {  new Float(motor) } );
	}

	/** 
	 * Returns all rows from the automovel table that match the criteria 'cod_tipo = :codTipo'.
	 */
	public Automovel[] findWhereCodTipoEquals(int codTipo) throws AutomovelDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cod_tipo = ? ORDER BY cod_tipo", new Object[] {  new Integer(codTipo) } );
	}

	/**
	 * Method 'AutomovelDaoImpl'
	 * 
	 */
	public AutomovelDaoImpl()
	{
	}

	/**
	 * Method 'AutomovelDaoImpl'
	 * 
	 * @param userConn
	 */
	public AutomovelDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "aluguel..automovel";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Automovel fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Automovel dto = new Automovel();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Automovel[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Automovel dto = new Automovel();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Automovel ret[] = new Automovel[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Automovel dto, ResultSet rs) throws SQLException
	{
		dto.setCodigo( rs.getInt( COLUMN_CODIGO ) );
		dto.setMarca( rs.getString( COLUMN_MARCA ) );
		dto.setModelo( rs.getString( COLUMN_MODELO ) );
		dto.setCor( rs.getString( COLUMN_COR ) );
		dto.setAno( rs.getInt( COLUMN_ANO ) );
		if (rs.wasNull()) {
			dto.setAnoNull( true );
		}
		
		dto.setMotor( rs.getFloat( COLUMN_MOTOR ) );
		if (rs.wasNull()) {
			dto.setMotorNull( true );
		}
		
		dto.setCodTipo( rs.getInt( COLUMN_COD_TIPO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Automovel dto)
	{
	}

	/** 
	 * Returns all rows from the automovel table that match the specified arbitrary SQL statement
	 */
	public Automovel[] findByDynamicSelect(String sql, Object[] sqlParams) throws AutomovelDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AutomovelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the automovel table that match the specified arbitrary SQL statement
	 */
	public Automovel[] findByDynamicWhere(String sql, Object[] sqlParams) throws AutomovelDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new AutomovelDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
