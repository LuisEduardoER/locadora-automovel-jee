/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package br.com.edu.jdbc;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.sql.CallableStatement;

import br.com.edu.dao.*;
import br.com.edu.dto.*;
import br.com.edu.exceptions.*;
import br.com.edu.factory.*;

public class ClienteDaoImpl extends AbstractDAO implements ClienteDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CPF, CNH, nome, endereco, telefone, data_nascimento FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "{ call sp_Clientes ( ?, ?, ?, ?, ?, ? ) }";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CPF = ?, CNH = ?, nome = ?, endereco = ?, telefone = ?, data_nascimento = ? WHERE CPF = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CPF = ?";

	/** 
	 * Index of column CPF
	 */
	protected static final int COLUMN_CPF = 1;

	/** 
	 * Index of column CNH
	 */
	protected static final int COLUMN_CNH = 2;

	/** 
	 * Index of column nome
	 */
	protected static final int COLUMN_NOME = 3;

	/** 
	 * Index of column endereco
	 */
	protected static final int COLUMN_ENDERECO = 4;

	/** 
	 * Index of column telefone
	 */
	protected static final int COLUMN_TELEFONE = 5;

	/** 
	 * Index of column data_nascimento
	 */
	protected static final int COLUMN_DATA_NASCIMENTO = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column CPF
	 */
	protected static final int PK_COLUMN_CPF = 1;

	/** 
	 * Inserts a new row in the cliente table.
	 */
	public boolean insert(Cliente dto) throws ClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		CallableStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareCall( SQL_INSERT );
			stmt.setString( COLUMN_CPF, dto.getCpf() );
			if (dto.isCnhNull()) {
				stmt.setNull( COLUMN_CNH, java.sql.Types.INTEGER );
			} else {
				stmt.setString( COLUMN_CNH, dto.getCnh() );
			}
		
			stmt.setString( COLUMN_NOME, dto.getNome() );
			stmt.setString( COLUMN_ENDERECO, dto.getEndereco() );
			if (dto.isTelefoneNull()) {
				stmt.setNull( COLUMN_TELEFONE, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( COLUMN_TELEFONE, dto.getTelefone() );
			}
		
			stmt.setString( COLUMN_DATA_NASCIMENTO, dto.getDataNascimento() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			stmt.execute();
			int rows = stmt.getUpdateCount();
			System.out.println( rows + " rows affected" );
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteDaoException( "Exception: " + _e.getMessage(), _e );			
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cliente table.
	 */
	public boolean update(ClientePk pk, Cliente dto) throws ClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getCpf() );
			if (dto.isCnhNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setString( index++, dto.getCnh() );
			}
		
			stmt.setString( index++, dto.getNome() );
			stmt.setString( index++, dto.getEndereco() );
			if (dto.isTelefoneNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getTelefone() );
			}
		
			stmt.setString( index++, dto.getDataNascimento() );
			stmt.setString( 7, pk.getCpf() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cliente table.
	 */
	public boolean delete(ClientePk pk) throws ClienteDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getCpf() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			return true;
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cliente table that matches the specified primary-key value.
	 */
	public Cliente findByPrimaryKey(ClientePk pk) throws ClienteDaoException
	{
		return findByPrimaryKey( pk.getCpf() );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'CPF = :cpf'.
	 */
	public Cliente findByPrimaryKey(String cpf) throws ClienteDaoException
	{
		Cliente ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CPF = ?", new Object[] {  new String(cpf) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria ''.
	 */
	public Cliente[] findAll() throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CPF", null );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'CPF = :cpf'.
	 */
	public Cliente[] findWhereCpfEquals(String cpf) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPF = ? ORDER BY CPF", new Object[] {  new String(cpf) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'CNH = :cnh'.
	 */
	public Cliente[] findWhereCnhEquals(String cnh) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CNH = ? ORDER BY CNH", new Object[] {  new String(cnh) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'nome = :nome'.
	 */
	public Cliente[] findWhereNomeEquals(String nome) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nome = ? ORDER BY nome", new Object[] { nome } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'endereco = :endereco'.
	 */
	public Cliente[] findWhereEnderecoEquals(String endereco) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE endereco = ? ORDER BY endereco", new Object[] { endereco } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'telefone = :telefone'.
	 */
	public Cliente[] findWhereTelefoneEquals(int telefone) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE telefone = ? ORDER BY telefone", new Object[] {  new Integer(telefone) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'data_nascimento = :dataNascimento'.
	 */
	public Cliente[] findWhereDataNascimentoEquals(String dataNascimento) throws ClienteDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE data_nascimento = ? ORDER BY data_nascimento", new Object[] { dataNascimento } );
	}

	/**
	 * Method 'ClienteDaoImpl'
	 * 
	 */
	public ClienteDaoImpl()
	{
	}

	/**
	 * Method 'ClienteDaoImpl'
	 * 
	 * @param userConn
	 */
	public ClienteDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "aluguel..cliente";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Cliente fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Cliente dto = new Cliente();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Cliente[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Cliente dto = new Cliente();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Cliente ret[] = new Cliente[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Cliente dto, ResultSet rs) throws SQLException
	{
		dto.setCpf( rs.getString( COLUMN_CPF ) );
		dto.setCnh( rs.getString( COLUMN_CNH ) );
		if (rs.wasNull()) {
			dto.setCnhNull( true );
		}
		
		dto.setNome( rs.getString( COLUMN_NOME ) );
		dto.setEndereco( rs.getString( COLUMN_ENDERECO ) );
		dto.setTelefone( rs.getInt( COLUMN_TELEFONE ) );
		if (rs.wasNull()) {
			dto.setTelefoneNull( true );
		}
		
		dto.setDataNascimento( rs.getString( COLUMN_DATA_NASCIMENTO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Cliente dto)
	{
	}

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public Cliente[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClienteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public Cliente[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClienteDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}
}
